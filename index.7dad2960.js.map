{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,EAAM,gBAAgB,CAAC,MACjC,EAAQ,EAAM,aAAa,CAAC,SAC5B,EAAO,MAAM,IAAI,CAAC,EAAM,gBAAgB,CAAC,OAE3C,EAAmB,KACnB,EAAmB,KACnB,EAAe,CAAA,EAEb,EAAkB,SAAC,CAAzB,QACE,AAAI,AAAe,UAAf,OAAO,EACF,OAAO,EAAI,OAAO,CAAC,aAAc,KAGnC,GACT,EAkBM,EAAc,SAAC,CAArB,EACE,EAAM,SAAS,CAAG,GAClB,EAAW,OAAO,CAAC,SAAC,CAApB,EAA4B,OAAA,EAAM,WAAW,CAAC,E,EAChD,EAEM,EAAiB,SAAC,CAAxB,EACE,EAAK,OAAO,CAAC,SAAC,CAAA,CAAK,CAAnB,EACE,EAAI,SAAS,CAAC,MAAM,CAAC,SAAU,IAAU,EAC3C,EACF,EAEA,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAQ,CAAzB,EACE,EAAO,gBAAgB,CAAC,QAAS,eA5BhB,EAAa,CA6BxB,CAAA,IAAqB,EACvB,EAAe,CAAC,GAEhB,EAAmB,EACnB,EAAe,CAAA,GAKjB,GAtCe,EAoCc,EApCD,EAoCQ,EAnC9B,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,EAAG,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,G,EAAM,IAAI,CAAC,SAAC,CAAA,CAAG,CAA1B,EACE,IAEI,EAFE,EAAS,EAAE,QAAQ,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GACjD,EAAS,EAAE,QAAQ,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GASvD,OALE,EADE,AAAgB,IAAhB,GAAqB,AAAgB,IAAhB,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar _loop = function(field) {\n    var fieldConfig = formFields[field];\n    var label = document.createElement(\"label\");\n    label.textContent = fieldConfig.label;\n    var input = void 0;\n    if (fieldConfig.type === \"select\") {\n        input = document.createElement(\"select\");\n        fieldConfig.options.forEach(function(optionValue) {\n            var option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.textContent = optionValue;\n            input.appendChild(option);\n        });\n    } else {\n        input = document.createElement(\"input\");\n        input.type = fieldConfig.type;\n    }\n    input.name = field;\n    input.setAttribute(\"data-qa\", fieldConfig.qa);\n    label.appendChild(input);\n    form.appendChild(label);\n};\nvar table = document.querySelector(\"table\");\nvar headers = table.querySelectorAll(\"th\");\nvar tbody = table.querySelector(\"tbody\");\nvar rows = Array.from(tbody.querySelectorAll(\"tr\"));\nvar lastSortedColumn = null;\nvar selectedRowIndex = null;\nvar isDescending = false;\nvar convertToNumber = function(str) {\n    if (typeof str === \"string\") return Number(str.replace(/[^0-9.-]+/g, \"\"));\n    return NaN;\n};\nvar sortTable = function(columnIndex, DESC) {\n    return _to_consumable_array(rows).sort(function(a, b) {\n        var aValue = a.children[columnIndex].textContent.trim();\n        var bValue = b.children[columnIndex].textContent.trim();\n        var comparison;\n        if (columnIndex === 3 || columnIndex === 4) comparison = convertToNumber(aValue) - convertToNumber(bValue);\n        else comparison = aValue.localeCompare(bValue);\n        return DESC ? -comparison : comparison;\n    });\n};\nvar upDateTable = function(sortedRows) {\n    tbody.innerHTML = \"\";\n    sortedRows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n};\nvar setRowSelected = function(rowIndex) {\n    rows.forEach(function(row, index) {\n        row.classList.toggle(\"active\", index === rowIndex);\n    });\n};\nheaders.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        if (lastSortedColumn === index) isDescending = !isDescending;\n        else {\n            lastSortedColumn = index;\n            isDescending = false;\n        }\n        var sortedRows = sortTable(index, isDescending);\n        upDateTable(sortedRows);\n    });\n});\nrows.forEach(function(row, index) {\n    row.addEventListener(\"click\", function() {\n        selectedRowIndex = selectedRowIndex === index ? null : index;\n        setRowSelected(selectedRowIndex);\n    });\n});\nvar pushNotification = function(title, description, type) {\n    var existingNotification = document.querySelector('[data-qa=\"notification\"]');\n    if (existingNotification) existingNotification.remove();\n    var notification = document.createElement(\"div\");\n    notification.classList.add(\"notification\", type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    var titleElement = document.createElement(\"h2\");\n    titleElement.classList.add(\"title\");\n    titleElement.textContent = title;\n    notification.appendChild(titleElement);\n    var descriptionElement = document.createElement(\"p\");\n    descriptionElement.textContent = description;\n    notification.appendChild(descriptionElement);\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 2000);\n};\nvar validatePosition = function(position) {\n    if (!position || !position.trim() || /\\d/.test(position) || position.trim().length < 2) return false;\n    return true;\n};\nvar formFields = {\n    name: {\n        label: \"Name:\",\n        type: \"text\",\n        qa: \"name\",\n        required: true\n    },\n    position: {\n        label: \"Position:\",\n        type: \"text\",\n        qa: \"position\",\n        required: true\n    },\n    office: {\n        label: \"Office:\",\n        type: \"select\",\n        qa: \"office\",\n        required: true,\n        options: [\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    age: {\n        label: \"Age:\",\n        type: \"number\",\n        qa: \"age\",\n        required: true\n    },\n    salary: {\n        label: \"Salary:\",\n        type: \"number\",\n        qa: \"salary\",\n        required: true\n    }\n};\nvar form = document.createElement(\"form\");\nform.className = \"new-employee-form\";\nfor(var field in formFields)_loop(field);\nvar submitBtn = document.createElement(\"button\");\nsubmitBtn.type = \"submit\";\nsubmitBtn.textContent = \"Save to table\";\nform.appendChild(submitBtn);\ndocument.body.appendChild(form);\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = {};\n    for(var field in formFields)formData[field] = form.querySelector('[name=\"'.concat(field, '\"]')).value.trim();\n    if (!formData.name || !formData.position || !formData.office || !formData.age || !formData.salary) {\n        pushNotification(\"Error\", \"All fields are required\", \"error\");\n        return;\n    }\n    if (formData.name.length < 4) {\n        pushNotification(\"Error\", \"Name must be at least 4 characters long\", \"error\");\n        return;\n    }\n    if (!validatePosition(formData.position)) {\n        pushNotification(\"Error\", \"Position must be at least 2 characters long and cannot contain numbers\", \"error\");\n        return;\n    }\n    var ageValue = Number(formData.age);\n    if (ageValue < 18 || ageValue > 90) {\n        pushNotification(\"Error\", \"Age must be between 18 and 90\", \"error\");\n        return;\n    }\n    var salaryValue = Number(formData.salary);\n    var newEmployeeData = {\n        name: formData.name,\n        position: formData.position,\n        office: formData.office,\n        age: ageValue,\n        salary: \"$\".concat(salaryValue.toLocaleString(\"en-US\"))\n    };\n    var newRow = tbody.insertRow();\n    for(var data in newEmployeeData){\n        var newCell = newRow.insertCell();\n        newCell.textContent = newEmployeeData[data];\n    }\n    pushNotification(\"Success\", \"Employee added to the table\", \"success\");\n    form.reset();\n});\n\n//# sourceMappingURL=index.7dad2960.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst headers = table.querySelectorAll('th');\nconst tbody = table.querySelector('tbody');\nconst rows = Array.from(tbody.querySelectorAll('tr'));\n\nlet lastSortedColumn = null;\nlet selectedRowIndex = null;\nlet isDescending = false;\n\nconst convertToNumber = (str) => {\n  if (typeof str === 'string') {\n    return Number(str.replace(/[^0-9.-]+/g, ''));\n  }\n\n  return NaN;\n};\n\nconst sortTable = (columnIndex, DESC) => {\n  return [...rows].sort((a, b) => {\n    const aValue = a.children[columnIndex].textContent.trim();\n    const bValue = b.children[columnIndex].textContent.trim();\n    let comparison;\n\n    if (columnIndex === 3 || columnIndex === 4) {\n      comparison = convertToNumber(aValue) - convertToNumber(bValue);\n    } else {\n      comparison = aValue.localeCompare(bValue);\n    }\n\n    return DESC ? -comparison : comparison;\n  });\n};\n\nconst upDateTable = (sortedRows) => {\n  tbody.innerHTML = '';\n  sortedRows.forEach((row) => tbody.appendChild(row));\n};\n\nconst setRowSelected = (rowIndex) => {\n  rows.forEach((row, index) => {\n    row.classList.toggle('active', index === rowIndex);\n  });\n};\n\nheaders.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    if (lastSortedColumn === index) {\n      isDescending = !isDescending;\n    } else {\n      lastSortedColumn = index;\n      isDescending = false;\n    }\n\n    const sortedRows = sortTable(index, isDescending);\n\n    upDateTable(sortedRows);\n  });\n});\n\nrows.forEach((row, index) => {\n  row.addEventListener('click', () => {\n    selectedRowIndex = selectedRowIndex === index ? null : index;\n    setRowSelected(selectedRowIndex);\n  });\n});\n\nconst pushNotification = (title, description, type) => {\n  const existingNotification = document.querySelector(\n    '[data-qa=\"notification\"]',\n  );\n\n  if (existingNotification) {\n    existingNotification.remove();\n  }\n\n  const notification = document.createElement('div');\n\n  notification.classList.add('notification', type);\n  notification.setAttribute('data-qa', 'notification');\n\n  const titleElement = document.createElement('h2');\n\n  titleElement.classList.add('title');\n  titleElement.textContent = title;\n  notification.appendChild(titleElement);\n\n  const descriptionElement = document.createElement('p');\n\n  descriptionElement.textContent = description;\n  notification.appendChild(descriptionElement);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n};\n\nconst validatePosition = (position) => {\n  if (\n    !position ||\n    !position.trim() ||\n    /\\d/.test(position) ||\n    position.trim().length < 2\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst formFields = {\n  name: {\n    label: 'Name:',\n    type: 'text',\n    qa: 'name',\n    required: true,\n  },\n  position: {\n    label: 'Position:',\n    type: 'text',\n    qa: 'position',\n    required: true,\n  },\n  office: {\n    label: 'Office:',\n    type: 'select',\n    qa: 'office',\n    required: true,\n    options: [\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n  age: {\n    label: 'Age:',\n    type: 'number',\n    qa: 'age',\n    required: true,\n  },\n  salary: {\n    label: 'Salary:',\n    type: 'number',\n    qa: 'salary',\n    required: true,\n  },\n};\n\nconst form = document.createElement('form');\n\nform.className = 'new-employee-form';\n\nfor (const field in formFields) {\n  const fieldConfig = formFields[field];\n  const label = document.createElement('label');\n\n  label.textContent = fieldConfig.label;\n\n  let input;\n\n  if (fieldConfig.type === 'select') {\n    input = document.createElement('select');\n\n    fieldConfig.options.forEach((optionValue) => {\n      const option = document.createElement('option');\n\n      option.value = optionValue;\n      option.textContent = optionValue;\n      input.appendChild(option);\n    });\n  } else {\n    input = document.createElement('input');\n    input.type = fieldConfig.type;\n  }\n\n  input.name = field;\n  input.setAttribute('data-qa', fieldConfig.qa);\n  label.appendChild(input);\n  form.appendChild(label);\n}\n\nconst submitBtn = document.createElement('button');\n\nsubmitBtn.type = 'submit';\nsubmitBtn.textContent = 'Save to table';\nform.appendChild(submitBtn);\ndocument.body.appendChild(form);\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = {};\n\n  for (const field in formFields) {\n    formData[field] = form.querySelector(`[name=\"${field}\"]`).value.trim();\n  }\n\n  if (\n    !formData.name ||\n    !formData.position ||\n    !formData.office ||\n    !formData.age ||\n    !formData.salary\n  ) {\n    pushNotification('Error', 'All fields are required', 'error');\n\n    return;\n  }\n\n  if (formData.name.length < 4) {\n    pushNotification(\n      'Error',\n      'Name must be at least 4 characters long',\n      'error',\n    );\n\n    return;\n  }\n\n  if (!validatePosition(formData.position)) {\n    pushNotification(\n      'Error',\n      'Position must be at least 2 characters long and cannot contain numbers',\n      'error',\n    );\n\n    return;\n  }\n\n  const ageValue = Number(formData.age);\n\n  if (ageValue < 18 || ageValue > 90) {\n    pushNotification('Error', 'Age must be between 18 and 90', 'error');\n\n    return;\n  }\n\n  const salaryValue = Number(formData.salary);\n  const newEmployeeData = {\n    name: formData.name,\n    position: formData.position,\n    office: formData.office,\n    age: ageValue,\n    salary: `$${salaryValue.toLocaleString('en-US')}`,\n  };\n\n  const newRow = tbody.insertRow();\n\n  for (const data in newEmployeeData) {\n    const newCell = newRow.insertCell();\n\n    newCell.textContent = newEmployeeData[data];\n  }\n\n  pushNotification('Success', 'Employee added to the table', 'success');\n  form.reset();\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","headers","querySelectorAll","tbody","rows","from","lastSortedColumn","selectedRowIndex","isDescending","convertToNumber","str","Number","replace","NaN","upDateTable","sortedRows","innerHTML","forEach","row","appendChild","setRowSelected","rowIndex","index","classList","toggle","header","addEventListener","columnIndex","DESC","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sort","a","b","comparison","aValue","children","textContent","trim","bValue","localeCompare","pushNotification","title","description","type","existingNotification","remove","notification","createElement","add","setAttribute","titleElement","descriptionElement","body","setTimeout","formFields","label","qa","required","position","office","options","age","salary","form","field","className","_loop","fieldConfig","input","optionValue","option","value","submitBtn","e","preventDefault","formData","concat","ageValue","salaryValue","newEmployeeData","toLocaleString","newRow","insertRow","data","newCell","insertCell","reset"],"version":3,"file":"index.7dad2960.js.map"}